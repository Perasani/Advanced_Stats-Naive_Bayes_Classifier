===========================================================================================================================================================
                                                     CODE TO IMPLEMENT NAIVE BAYES IN DATASET AND FIND PERFORMANCE
===========================================================================================================================================================



from sklearn.metrics import accuracy_score
from sklearn.metrics import confusion_matrix
from sklearn.metrics import classification_report
import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import matplotlib.pyplot as plt # for data visualization purposes
import seaborn as sns # for statistical data visualization
# train a Gaussian Naive Bayes classifier on the training set
from sklearn.naive_bayes import GaussianNB
import category_encoders as ce
from sklearn.preprocessing import RobustScaler
import os
import warnings
import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import matplotlib.pyplot as plt # for data visualization purposes
import seaborn as sns # for statistical data visualization
from sklearn.model_selection import train_test_split


# Input data files are available in the "../input/" directory.
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory


#read the dataset
data = 'C://Users//Administrator//Desktop//adult.csv'
df = pd.read_csv(data)

# view dimensions of dataset
print(df.shape)

# view dimensions of dataset
print(df.head())

#changing column names for our understanding
col_names = ['age', 'workclass', 'fnlwgt', 'education', 'education_num', 'marital_status', 'occupation', 'relationship',
             'race', 'sex', 'capital_gain', 'capital_loss', 'hours_per_week', 'native_country', 'income']
df.columns = col_names
print(df.columns)
print(df.head())
print(df.info())

# find categorical variables
categorical = [var for var in df.columns if df[var].dtype=='O']
print('There are {} categorical variables\n'.format(len(categorical)))
print('The categorical variables are :\n\n', categorical)

# check missing values in categorical variables
a=df[categorical].isnull().sum()
print(a)
print('------------------------------------------------')
# view frequency counts of values in categorical variables
for var in categorical:
    print(df[var].value_counts())

print('--------------------------------------------------')
# view frequency distribution of categorical variables
for var in categorical:
    print(df[var].value_counts() / np.float(len(df)))

print('-------------------------------------------------')
# check labels in workclass variable
print(df.workclass.unique())

print('----------------------------------------------')
# check frequency distribution of values in workclass variable
df.workclass.value_counts()

# replace '?' values in workclass variable with `NaN`
df['workclass'].replace('?', np.NaN, inplace=True)

print('================================================================')
# again check the frequency distribution of values in workclass variable
print(df.workclass.value_counts())

# check labels in occupation variable
print('================================================================')
print(df.occupation.unique())


# check frequency distribution of values in occupation variable
print('================================================================')
print(df.occupation.value_counts())

# replace '?' values in occupation variable with `NaN`
df['occupation'].replace('?', np.NaN, inplace=True)
# again check the frequency distribution of values in occupation variable
print("==================================================================")
df.occupation.value_counts()

# check labels in native_country variable
df.native_country.unique()
# check frequency distribution of values in native_country variable
df.native_country.value_counts()


# replace '?' values in native_country variable with `NaN`
df['native_country'].replace('?', np.NaN, inplace=True)
# again check the frequency distribution of values in native_country variable
print("=====================================================================")
print(df.native_country.value_counts())

#checking missing values
df[categorical].isnull().sum()

# check for cardinality in categorical variables
print("=========================================================================")
for var in categorical:
    print(var, ' contains ', len(df[var].unique()), ' labels')

# find numerical variables
numerical = [var for var in df.columns if df[var].dtype!='O']
print('There are {} numerical variables\n'.format(len(numerical)))
print('The numerical variables are :', numerical)
# view the numerical variables
df[numerical].head()
# check missing values in numerical variables
df[numerical].isnull().sum()
X = df.drop(['income'], axis=1)
y = df['income']

# split X and y into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 0)

# check the shape of X_train and X_test
print("===============================")
print(X_train.shape)
print(X_test.shape)
print("=================================")

# check data types in X_train
print(X_train.dtypes)
# display categorical variables
print("====================================================================")
categorical = [col for col in X_train.columns if X_train[col].dtypes == 'O']
print(categorical)

# display numerical variables
print('====================================================================')
numerical = [col for col in X_train.columns if X_train[col].dtypes != 'O']
numerical

# print percentage of missing values in the categorical variables in training set
print("=====================================================================")
print(X_train[categorical].isnull().mean())

# print percentage of missing values in the categorical variables in training set
print("=====================================================================")
print(X_train[categorical].isnull().mean())


# impute missing categorical variables with most frequent value
for df2 in [X_train, X_test]:
    df2['workclass'].fillna(X_train['workclass'].mode()[0], inplace=True)
    df2['occupation'].fillna(X_train['occupation'].mode()[0], inplace=True)
    df2['native_country'].fillna(X_train['native_country'].mode()[0], inplace=True)

# check missing values in categorical variables in X_train
print(X_train[categorical].isnull().sum())

# check missing values in categorical variables in X_test
print(X_test[categorical].isnull().sum())

# check missing values in X_train
print(X_train.isnull().sum())

# check missing values in X_test
print(X_test.isnull().sum())

# encode remaining variables with one-hot encoding
encoder = ce.OneHotEncoder(cols=['workclass', 'education', 'marital_status', 'occupation', 'relationship',
                                 'race', 'sex', 'native_country'])
X_train = encoder.fit_transform(X_train)
X_test = encoder.transform(X_test)
X_train.head()
X_test.head()
cols = X_train.columns
scaler = RobustScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)
X_train = pd.DataFrame(X_train, columns=[cols])
X_test = pd.DataFrame(X_test, columns=[cols])
X_train.head()

# instantiate the model
gnb = GaussianNB()
# fit the model
gnb.fit(X_train, y_train)

y_pred = gnb.predict(X_test)
print("==========================================")
print(y_pred)
print("===========================================")

print('Model accuracy score: {0:0.4f}'. format(accuracy_score(y_test, y_pred)))
y_pred_train = gnb.predict(X_train)
y_pred_train
print('Training-set accuracy score: {0:0.4f}'. format(accuracy_score(y_train, y_pred_train)))
# print the scores on training and test set
print('Training set score: {:.4f}'.format(gnb.score(X_train, y_train)))
print('Test set score: {:.4f}'.format(gnb.score(X_test, y_test)))
# check class distribution in test set
y_test.value_counts()
# check null accuracy score
null_accuracy = (7407/(7407+2362))
print('Null accuracy score: {0:0.4f}'. format(null_accuracy))

# Print the Confusion Matrix and slice it into four pieces
cm = confusion_matrix(y_test, y_pred)
print("=======================================================")
print('Confusion matrix\n\n', cm)
print('\nTrue Positives(TP) = ', cm[0,0])
print('\nTrue Negatives(TN) = ', cm[1,1])
print('\nFalse Positives(FP) = ', cm[0,1])
print('\nFalse Negatives(FN) = ', cm[1,0])
print("=======================================================")

print(classification_report(y_test, y_pred))

# print classification accuracy
TP = cm[0,0]
TN = cm[1,1]
FP = cm[0,1]
FN = cm[1,0]
classification_accuracy = (TP + TN) / float(TP + TN + FP + FN)
print("====================================================================")
print('Classification accuracy : {0:0.4f}'.format(classification_accuracy))

print("====================================================================")
# print classification error
classification_error = (FP + FN) / float(TP + TN + FP + FN)
print('Classification error : {0:0.4f}'.format(classification_error))

# print precision score
print("====================================================================")
precision = TP / float(TP + FP)
print('Precision : {0:0.4f}'.format(precision))
recall = TP / float(TP + FN)
print('Recall or Sensitivity : {0:0.4f}'.format(recall))
true_positive_rate = TP / float(TP + FN)
print('True Positive Rate : {0:0.4f}'.format(true_positive_rate))
false_positive_rate = FP / float(FP + TN)
print('False Positive Rate : {0:0.4f}'.format(false_positive_rate))
specificity = TN / (TN + FP)
print('Specificity : {0:0.4f}'.format(specificity))
print("=====================================================================")

# print the first 10 predicted probabilities of two classes- 0 and 1
y_pred_prob = gnb.predict_proba(X_test)[0:10]
y_pred_prob

# store the probabilities in dataframe
y_pred_prob_df = pd.DataFrame(data=y_pred_prob, columns=['Prob of - <=50K', 'Prob of - >50K'])
y_pred_prob_df

# print the first 10 predicted probabilities for class 1 - Probability of >50K
gnb.predict_proba(X_test)[0:10, 1]

# store the predicted probabilities for class 1 - Probability of >50K
y_pred1 = gnb.predict_proba(X_test)[:, 1]
# plot histogram of predicted probabilities
# adjust the font size
plt.rcParams['font.size'] = 12
# plot histogram with 10 bins
plt.hist(y_pred1, bins = 10)
# set the title of predicted probabilities
plt.title('Histogram of predicted probabilities of salaries >50K')
# set the x-axis limit
plt.xlim(0,1)
# set the title
plt.xlabel('Predicted probabilities of salaries >50K')
plt.ylabel('Frequency')

